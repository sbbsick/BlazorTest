@page "/"
@using BlazorTest.Data
@using BlazorTest.Context
@using BlazorTest.Components
@inject MyDbContext dbContext

<div class="uk-container uk-container-small">
    <PageTitle>Lista de peixes do Lázaro.</PageTitle>


    <div class="uk-flex uk-flex-center">
        <ModalAdd OnValidSubmit="@HandleAddNewFish" />
    </div>

    <hr class="uk-divider-icon"/>
    <table class="uk-table uk-table-hover uk-table-divider">
        <tbody>
        @foreach (var group in fishesByType)
        {
            <thead>
            <th>
                @if (activeFishType == group.Key)
                {
                    <a class="uk-icon-button" uk-icon="minus" @onclick="() => ToggleTable(group.Key)"></a>
                    <span>&nbsp;Type: @group.Key</span>

                }
                else
                {
                    <a class="uk-icon-button" uk-icon="plus" @onclick="() => ToggleTable(group.Key)"></a>
                    <span>&nbsp;Type: @group.Key</span>
                }
            </th>
            </thead>


            @if (activeFishType == group.Key)
            {
                <tr>
                    <th>Name</th>
                    <th>Lenght</th>
                    <th>Weight</th>
                    <th>Action</th>
                </tr>

                foreach (var fish in group.Value)
                {
                    <tr>
                        <td>@fish.Name</td>
                        <td>@fish.Length</td>
                        <td>@fish.Weight</td>
                        <td>
                            <a @onclick="() => HandleDeleteFish(fish.Id) " class="uk-icon-button" uk-icon="trash"></a>
                        </td>
                    </tr>
                    
                }

                <tr>
                    <td colspan="3">Total Weight: @CalculateTotalWeight(group.Value)</td>
                </tr>
            }
        }
        </tbody>
    </table>

</div>
@code {
    private List<Fish>? fishes;
    private Dictionary<EFishType, List<Fish>> fishesByType = new Dictionary<EFishType, List<Fish>>();
    
    
    protected override async Task OnInitializedAsync()
    {
        await dbContext.SeedData();
        GetFishes();
    }

    private float CalculateTotalWeight(List<Fish> groupFishes)
    {
        return groupFishes.Sum(fish => fish.Weight);
    }

    private EFishType? activeFishType;

    private void ToggleTable(EFishType fishType)
    {
        if (activeFishType == fishType)
            activeFishType = null;
        else
            activeFishType = fishType;
    }

    private void GetFishes()
    {
        fishes = dbContext.Fishes.ToList();
        fishesByType = fishes
            .GroupBy(fish => fish.Type)
            .ToDictionary(fish => fish.Key, fish => fish.ToList());
    }

    private async Task HandleAddNewFish(Fish newFish)
    {
        dbContext.Fishes.Add(newFish);

        if (fishesByType.ContainsKey(newFish.Type)) 
            fishesByType[newFish.Type].Add(newFish);
        else
            fishesByType[newFish.Type] = new List<Fish> { newFish };
    }

    private async Task HandleDeleteFish(Guid fishId)
    {
        dbContext.DeleteFish(fishId);
        await dbContext.SaveChangesAsync(); // Salva as mudanças no banco de dados de forma assíncrona
        GetFishes(); // Recarrega os peixes na variável fishesByType
    }
}