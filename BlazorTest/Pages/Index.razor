@page "/"
@using BlazorTest.Data
@using BlazorTest.Context
@inject MyDbContext dbContext

<PageTitle>Index</PageTitle>

<button  class="btn btn-danger" @onclick="AddNewFish">Add New Fish</button>
<hr/>
<table class="table table-dark table-hover">
    <thead>
    <tr>
        <th>Name</th>
        <th>Length</th>
        <th>Weight</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var group in fishesByType)
    {
        <tr>
            <th colspan="3">Type: @group.Key</th>
        </tr>

        @foreach (var fish in group.Value)
        {
            <tr>
                <td>@fish.Name</td>
                <td>@fish.Length</td>
                <td>@fish.Weight</td>
            </tr>
        }
        <tr>
            <td colspan="3">Total Weight: @CalculateTotalWeight(group.Value)</td>
        </tr>
    }
    </tbody>
</table>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalLong">
    Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<SurveyPrompt Title="TESTE BLAZOR" />

@code {
    private List<Fish> fishes;
    private Dictionary<EFishType, List<Fish>> fishesByType = new Dictionary<EFishType, List<Fish>>();

    protected override async Task OnInitializedAsync()
    {
        LoadFishes();
    }

    private void LoadFishes()
    {
        GetFishes();
        fishesByType = fishes.GroupBy(f => f.Type).ToDictionary(f => f.Key, f => f.ToList());
    }

    private async Task AddNewFish()
    {
        var listFishes = new List<Fish>
        {
            new Fish { Name = "Trout", Length = 10, Weight = 2.8f, Type = EFishType.Freshwater },
            new Fish { Name = "Salmon", Length = 30, Weight = 10.8f, Type = EFishType.Saltwater },
            new Fish { Name = "Piranha", Length = 14, Weight = 6.8f, Type = EFishType.Freshwater },
            new Fish { Name = "Pacu", Length = 20, Weight = 12.8f, Type = EFishType.Freshwater },
            new Fish { Name = "Salmon2", Length = 10, Weight = 2.8f, Type = EFishType.Saltwater },
        };

        dbContext.Fishes.AddRange(listFishes.ToList());
        await dbContext.SaveChangesAsync();
        LoadFishes();
    }

    private void GetFishes()
    {
        fishes = dbContext.Fishes.ToList();
        StateHasChanged();
    }

    private float CalculateTotalWeight(List<Fish> groupFishes)
    {
        float totalWeight = 0;
        foreach (var fish in groupFishes)
        {
            totalWeight += fish.Weight;
        }
        return totalWeight;
    }
}
